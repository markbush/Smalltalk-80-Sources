View subclass: #FormView
  instanceVariableNames: 'rule mask'
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Graphics-Views'!
FormView class
  instanceVariableNames: ''!
"-----------------------------------"!
FormView comment:
'This class has as its model a Form.  It is used mainly
			to allow display of Forms on the display screen in the
			model-view-controller metaphor.'!
"-----------------------------------"!
!FormView class methodsFor: 'examples'!
exampleOne
	"Frame a Form (specified by the user) with a border of 5 bits in width and
	display it offset 100 x 100 from the corner of the display screen."

	| f view |
	f _ Form fromUser.
	view _ self new model: f.
	view translateBy: 100 @ 100.
	view borderWidth: 2.
	view insideColor: Form white.
	view display.
	view release

	"FormView exampleOne."!
exampleTwo
	"Frame a Form (specified by the user) that is scaled by 2.  The border is
	2 bits in width.  Displays at locatoin 100,100."

	| f view |
	f _ Form fromUser.
	view _ self new model: f.
	view scaleBy: 2.0.
	"if you eliminate this message, no inside border displays"
	view translateBy: 100 @ 100.
	view borderWidth: 2.
	view insideColor: Form white.
	view display.
	view release

	"FormView exampleTwo."!
"-----------------------------------"!
!FormView methodsFor: 'accessing'!
mask
	"Answer an instance of class Form that is the mask used when displaying
	the receiver's model (a Form) on the display screen (see BitBlt for the
	meaning of this mask)."

	mask == nil
		ifTrue: [^self defaultMask]
		ifFalse: [^mask]!
mask: aForm
	"Set the display mask for displaying the receiver's model."
	mask _ aForm!
rule
	"Answer a number from 0 to 15 that indicates which of the sixteen display rules
	(logical function of two boolean values) is to be used when copying the receiver's
	model (a Form) onto the display screen."

	rule == nil
		ifTrue: [^self defaultRule]
		ifFalse: [^rule]!
rule: anInteger
	"Set the display rule for the receiver."
	rule _ anInteger!
"-----------------------------------"!
!FormView methodsFor: 'controller access'!
defaultControllerClass
	^FormEditor!
"-----------------------------------"!
!FormView methodsFor: 'displaying'!
displayView
	| oldOffset |
	super displayView.
	insideColor == nil ifFalse: [Display fill: self insetDisplayBox mask: insideColor].
	oldOffset _ model offset.
	model offset: 0@0.
	model
		displayOn: Display
		transformation: self displayTransformation
		clippingBox: self insetDisplayBox
		rule: self rule
		mask: self mask.
	model offset: oldOffset!
"-----------------------------------"!
!FormView methodsFor: 'menu messages'!
accept
	"The receiver's model is set to the working version, the one in which edits
	are carried out."
	^self!
cancel
	"Set the working form to be a copy of the model."
	^self!
"-----------------------------------"!
!FormView methodsFor: 'model access'!
changeValueAt: location put: anInteger
	"The receiver's model is a Form which has an array of bits.  Change
	the bit at index location to be anInteger (either 1 or 0).  Inform all
	objects that depend on the model that it has changed."

	model valueAt: location put: anInteger.
	model changed: self!
"-----------------------------------"!
!FormView methodsFor: 'private'!
defaultMask
	"The default display mask, blackMask, is a 16x16 Form that is all ones"

	^Form black!
defaultRule
	"This is the default display rule (3=over or storing)"

	^Form over!
"-----------------------------------"!
!FormView methodsFor: 'updating'!
update: aFormView
	self == aFormView ifFalse: [self display]!
"-----------------------------------"!
!FormView methodsFor: 'window access'!
defaultWindow
	^(Rectangle origin: 0 @ 0 extent: model extent)
		expandBy: borderWidth!
