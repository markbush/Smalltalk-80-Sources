Collection subclass: #Bag
  instanceVariableNames: 'contents'
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Collections-Unordered'!
Bag class
  instanceVariableNames: ''!
"-----------------------------------"!
Bag comment:
'I am an unordered collection of elements.  I store these elements in a dictionary, tallying up occurrences of equal objects.  Because I store an occurrence only once, my clients should beware that objects they store will not necessarily be retrieved such that == is true.  If the client cares, a subclass of me should be created.'!
"-----------------------------------"!
!Bag class methodsFor: 'instance creation'!
new
	^super new setDictionary!
"-----------------------------------"!
!Bag methodsFor: 'accessing'!
at: index
	self errorNotKeyed!
at: index put: anObject
	self errorNotKeyed!
size
	| tally |
	tally _ 0.
	contents do: [:each | tally _ tally + each].
	^tally!
sortedCounts
	"Answer with a collection of counts with elements, sorted by decreasing count."
	| counts |
	counts _ SortedCollection sortBlock: [:x :y | x >= y].
	contents associationsDo:
		[:assn |
		counts add: (Association key: assn value value: assn key)].
	^ counts!
sortedElements
	"Answer with a collection of elements with counts, sorted by element."
	| elements |
	elements _ SortedCollection new.
	contents associationsDo: [:assn | elements add: assn].
	^ elements!
"-----------------------------------"!
!Bag methodsFor: 'adding'!
add: newObject
	^self add: newObject withOccurrences: 1!
add: newObject withOccurrences: anInteger
	"Add the element newObject to the elements of the receiver.  Do so as
	though the element were added anInteger number of times.  Answer newObject."

	(self includes: newObject)
		ifTrue: [contents at: newObject put: anInteger + (contents at: newObject)]
		ifFalse: [contents at: newObject put: anInteger].
	^newObject!
"-----------------------------------"!
!Bag methodsFor: 'enumerating'!
do: aBlock
	contents associationsDo: [:assoc | assoc value timesRepeat: [aBlock value: assoc key]]!
"-----------------------------------"!
!Bag methodsFor: 'private'!
setDictionary
	contents _ Dictionary new!
"-----------------------------------"!
!Bag methodsFor: 'removing'!
remove: oldObject ifAbsent: exceptionBlock
	| count |
	(self includes: oldObject)
		ifTrue: [(count _ contents at: oldObject) = 1
				ifTrue: [contents removeKey: oldObject]
				ifFalse: [contents at: oldObject put: count - 1]]
		ifFalse: [^exceptionBlock value].
	^oldObject!
"-----------------------------------"!
!Bag methodsFor: 'testing'!
includes: anObject
	^contents includesKey: anObject!
occurrencesOf: anObject
	(self includes: anObject)
		ifTrue: [^contents at: anObject]
		ifFalse: [^0]!
