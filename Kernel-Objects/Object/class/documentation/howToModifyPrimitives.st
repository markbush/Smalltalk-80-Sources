howToModifyPrimitives
	"You are allowed to write methods which specify primitives, but please use
	caution.  If you make a subclass of a class which contains a primitive method,
	the subclass inherits the primitive.  The message which is implemented
	primitively may be overridden in the subclass (E.g., see at:put: in String's
	subclass Symbol).  The primitive behavior can be invoked using super (see
	Symbol string:).

	A class which attempts to mimic the behavior of another class without being
	its subclass may or may not be able to use the primitives of the original class.
	In general, if the instance variables read or written by a primitive have the
	same meanings and are in the same fields in both classes, the primitive will
	work.

	For certain frequently used 'special selectors', the compiler emits a
	send-special-selector bytecode instead of a send-message bytecode.
	Special selectors were created because they offer two advantages.  Code
	which sends special selectors compiles into fewer bytes than normal.  For
	some pairs of receiver classes and special selectors, the interpreter jumps
	directly to a primitive routine without looking up the method in the class.
	This is much faster than a normal message lookup.

	A selector which is a special selector solely in order to save space has a
	normal behavior.  Methods whose selectors are special in order to
	gain speed contain the comment, 'No Lookup'.  When the interpreter
	encounters a send-special-selector bytecode, it checks the class of the
	receiver and the selector.  If the class-selector pair is a no-lookup pair,
	then the interpreter swiftly jumps to the routine which implements the
	corresponding primitive.  (A special selector whose receiver is not of the
	right class to make a no-lookup pair, is looked up normally).  The pairs are
	listed below.  No-lookup methods contain a primitive number specification,
	<primitive: xx>, which is redundant.  Since the method is not normally looked
	up, deleting the primitive number specification cannot prevent this
	primitive from running.  If a no-lookup primitive fails, the method is looked
	up normally, and the expressions in it are executed.

	No Lookup pairs of (class, selector)

	SmallInteger with any of		+ - * /  \\  bitOr: bitShift: bitAnd:  //
	SmallInteger with any of		=  ~=  >  <  >=  <=
	Any class with					==
	Any class with 					@
	Point with either of				x y
	ContextPart with					blockCopy:
	BlockContext with either of 		value value:
	"

	self error: 'comment only'
