whatIsAPrimitive
	"Some messages in the system are responded to primitively. A primitive
	response is performed directly by the interpreter rather than by evaluating
	expressions in a method. The methods for these messages indicate the
	presence of a primitive response by including <primitive: xx> before the
	first expression in the method.

	Primitives exist for several reasons. Certain basic or 'primitive'
	operations cannot be performed in any other way. Smalltalk without
	primitives can move values from one variable to another, but cannot add two
	SmallIntegers together. Many methods for arithmetic and comparison
	between numbers are primitives. Some primitives allow Smalltalk to
	communicate with I/O devices such as the disk, the display, and the keyboard.
	Some primitives exist only to make the system run faster; each does the same
	thing as a certain Smalltalk method, and its implementation as a primitive is
	optional.

	When the Smalltalk interpreter begins to execute a method which specifies a
	primitive response, it tries to perform the primitive action and to return a
	result. If the routine in the interpreter for this primitive is successful,
	it will return a value and the expressions in the method will not be evaluated.
	If the primitive routine is not successful, the primitive 'fails', and the
	Smalltalk expressions in the method are executed instead. These
	expressions are evaluated as though the primitive routine had not been
	called.

	The Smalltalk code that is evaluated when a primitive fails usually
	anticipates why that primitive might fail. If the primitive is optional, the
	expressions in the method do exactly what the primitive would have done (See
	Number @). If the primitive only works on certain classes of arguments, the
	Smalltalk code tries to coerce the argument or appeals to a superclass to find
	a more general way of doing the operation (see SmallInteger +). If the
	primitive is never supposed to fail, the expressions signal an error (see
	SmallInteger asFloat).

	Each method that specifies a primitive has a comment in it. If the primitive is
	optional, the comment will say 'Optional'. An optional primitive that is not
	implemented always fails, and the Smalltalk expressions do the work
	instead.

	If a primitive is not optional, the comment will say, 'Essential'. Some
	methods will have the comment, 'No Lookup'. See Object
	howToModifyPrimitives for an explanation of special selectors which are
	not looked up.

	For the primitives for +, -, *, and bitShift: in SmallInteger, and truncated
	in Float, the primitive constructs and returns a 16-bit
	LargePositiveInteger when the result warrants it. Returning 16-bit
	LargePositiveIntegers from these primitives instead of failing is
	optional in the same sense that the LargePositiveInteger arithmetic
	primitives are optional. The comments in the SmallInteger primitives say,
	'Fails if result is not a SmallInteger', even though the implementor has the
	option to construct a LargePositiveInteger. For further information on
	primitives, see the 'Primitive Methods' part of the chapter on the formal
	specification of the interpreter in the Smalltalk book."

	self error: 'comment only'
