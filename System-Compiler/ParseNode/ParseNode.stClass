Object subclass: #ParseNode
  instanceVariableNames: 'comment'
  classVariableNames: 'Bfp CodeBases CodeLimits Dup EndMethod EndRemote Jmp JmpLimit JmpLong LdFalse LdInstLong LdInstType LdLitIndType LdLitType LdMinus1 LdNil LdSelf LdSuper LdTempType LdThisContext LdTrue NodeFalse NodeNil NodeSelf NodeSuper NodeThisContext NodeTrue Pop Send SendLimit SendLong SendPlus SendType ShortStoP StdLiterals StdSelectors StdVariables Store StorePop'
  poolDictionaries: ''
  category: 'System-Compiler'!
ParseNode class
  instanceVariableNames: ''!
"-----------------------------------"!
ParseNode comment:
'This superclass of most compiler/decompiler classes declares common class variables, default messages, and the code emitters for jumps.  Some of the class variables are initialized here; the rest are initialized in class VariableNode, which is the last alphabetically.'!
"-----------------------------------"!
!ParseNode class methodsFor: 'class initialization'!
initialize
	"ParseNode initialize.  VariableNode initialize."

	LdInstType _ 1.
	LdTempType _ 2.
	LdLitType _ 3.
	LdLitIndType _ 4.
	SendType _ 5.
	CodeBases _ #(0 16 32 64 208 ).
	CodeLimits _ #(16 16 32 32 16 ).
	LdSelf _ 112.
	LdTrue _ 113.
	LdFalse _ 114.
	LdNil _ 115.
	LdMinus1 _ 116.
	LdInstLong _ 128.
	Store _ 129.
	StorePop _ 130.
	ShortStoP _ 96.
	SendLong _ 131.
	LdSuper _ 133.
	Pop _ 135.
	Dup _ 136.
	LdThisContext _ 137.
	EndMethod _ 124.
	EndRemote _ 125.
	Jmp _ 144.
	Bfp _ 152.
	JmpLimit _ 8.
	JmpLong _ 160.
	SendPlus _ 176.
	Send _ 208.
	SendLimit _ 16!
"-----------------------------------"!
!ParseNode methodsFor: 'accessing'!
comment
	^comment!
comment: newComment
	"self halt."

	comment _ newComment!
"-----------------------------------"!
!ParseNode methodsFor: 'code generation'!
emitBranch: dist pop: stack on: strm
	stack pop: 1.
	dist = 0
		ifTrue: [strm nextPut: Pop]
		ifFalse: [self emitShortOrLong: dist code: Bfp on: strm]!
emitForEffect: stack on: strm
	self emitForValue: stack on: strm.
	strm nextPut: Pop.
	stack pop: 1!
emitForReturn: stack on: strm
	self emitForValue: stack on: strm.
	strm nextPut: EndMethod!
emitJump: dist on: strm
	dist = 0 ifFalse: [self emitShortOrLong: dist code: Jmp on: strm]!
emitLong: dist code: longCode on: aStream
	"force a two-byte jump"

	| code distance |
	code _ longCode.
	distance _ dist.
	distance < 0
		ifTrue:
			[distance _ distance + 1024]
		ifFalse:
			[distance > 1023
				ifTrue: [distance _ -1]
				ifFalse: [code _ code + 4]].
	distance < 0
		ifTrue:
			[self error: 'A block compiles more than 1K bytes of code']
		ifFalse:
			[aStream nextPut: distance // 256 + code.
			aStream nextPut: distance \\ 256]!
emitLongJump: dist on: strm
	"force a two byte jump"

	self emitLong: dist code: JmpLong on: strm!
emitShortOrLong: dist code: shortCode on: strm
	(1 <= dist and: [dist <= JmpLimit])
		ifTrue: [strm nextPut: shortCode + dist - 1]
		ifFalse: [self emitLong: dist code: shortCode + 16 on: strm]!
emitTrueBranch: dist pop: stack on: strm
	stack pop: 1.
	"offset for dist>0 adds another 4, so will begin at JmpLong+8"
	self emitLong: dist code: JmpLong+4 on: strm!
sizeBranch: dist
	dist = 0 ifTrue: [^1].
	^self sizeShortOrLong: dist!
sizeForEffect: encoder
	^(self sizeForValue: encoder) + 1!
sizeForReturn: encoder
	^(self sizeForValue: encoder) + 1!
sizeJump: dist
	dist = 0 ifTrue: [^0].
	^self sizeShortOrLong: dist!
sizeShortOrLong: dist
	(1 <= dist and: [dist <= JmpLimit])
		ifTrue: [^1].
	^2!
"-----------------------------------"!
!ParseNode methodsFor: 'converting'!
asReturnNode
	^ReturnNode new expr: self!
"-----------------------------------"!
!ParseNode methodsFor: 'encoding'!
encodeSelector: selector
	^nil!
"-----------------------------------"!
!ParseNode methodsFor: 'printing'!
printCommentOn: aStream indent: indent
	| thisComment |
	comment == nil ifTrue: [^self].
	1 to: comment size do:
		[:index |
		index > 1 ifTrue: [aStream crtab: indent].
		aStream nextPut: $".
		thisComment _ comment at: index.
		self printSingleComment: thisComment
			on: aStream
			indent: indent.
		aStream nextPut: $"].
	comment _ nil!
printOn: aStream
	aStream nextPutAll: '{'.
	self printOn: aStream indent: 0.
	aStream nextPutAll: '}'!
printOn: aStream indent: anInteger
	"If control gets here, avoid recursion loop"

	super printOn: aStream!
printOn: aStream indent: level precedence: p
	self printOn: aStream indent: level!
"-----------------------------------"!
!ParseNode methodsFor: 'private'!
nextWordFrom: aStream setCharacter: aBlock
	| outStream char |
	outStream _ WriteStream on: (String new: 16).
	[aStream atEnd
		or:
			[char _ aStream next.
			char = Character cr or: [char = Character space]]]
		whileFalse: [outStream nextPut: char].
	aBlock value: char.
	^outStream contents!
printSingleComment: aString on: aStream indent: indent
	"Print the comment string, assuming it has been indented indent tabs.
	Break the string at word breaks, given the widths in the default font, at
	 450 points."

	| readStream word position lineBreak lastChar font wordWidth tabWidth spaceWidth |
	readStream _ ReadStream on: aString.
	font _ TextStyle default defaultFont.
	tabWidth _ TextConstants at: #DefaultTab.
	spaceWidth _ font widthOf: Character space.
	position _ indent * tabWidth.
	lineBreak _ 450.
	[readStream atEnd]
		whileFalse:
			[word _ self nextWordFrom: readStream setCharacter: [:lastChar | lastChar].
			wordWidth _ 0.
			word do: [:char | wordWidth _ wordWidth + (font widthOf: char)].
			position _ position + wordWidth.
			position > lineBreak
				ifTrue:
					[aStream crtab: indent.
					position _ indent * tabWidth + wordWidth + spaceWidth.
					lastChar = Character cr
						ifTrue: [[readStream peekFor: Character tab] whileTrue].
					aStream nextPutAll: word; space]
				ifFalse:
					[aStream nextPutAll: word.
					readStream atEnd
						ifFalse:
							[position _ position + spaceWidth.
							aStream space].
					lastChar = Character cr
						ifTrue:
							[aStream crtab: indent.
							position _ indent * tabWidth.
							[readStream peekFor: Character tab] whileTrue]]]!
"-----------------------------------"!
!ParseNode methodsFor: 'testing'!
canBeSpecialArgument
	"can I be an argument of (e.g.) ifTrue:?"

	^false!
canCascade
	^false!
isArg
	^false!
isReturnSelf
	^false!
isReturningIf
	^false!
isVariableReference
	^false!
