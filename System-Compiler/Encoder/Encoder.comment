I encode names and literals into tree nodes with byte codes for the compiler.  Byte codes for literals are not assigned until the tree-sizing pass of the compiler, because only then is it known which literals are actually needed.  I also keep track of sourceCode ranges during parsing and code generation so I can provide an inverse map for the debugger.

scopeTable is a dictionary of (names->nodes)
nTemps is the count of temporaries used so far
supered is true if super has been used in this method
requestor is usually a parser
class is the class in which we are compiling - used to look up class and pool variables
literalStream accumulates the literals used in this method
selectorSet is a dictionary of (selectors->nodes) predefined or used in this method
litIndSet is a dictionary of (poolVars->nodes) used in this method
litSet is a dictionary of (constants->nodes) used in this method
sourceRanges is a dictionary of (node->source interval)s
