Object subclass: #Compiler
  instanceVariableNames: 'sourceStream requestor class context'
  classVariableNames: ''
  poolDictionaries: ''
  category: 'System-Compiler'!
Compiler class
  instanceVariableNames: ''!
"-----------------------------------"!
Compiler comment:
'The compiler accepts Smalltalk source code from sourceStream, and compiles it in the context of a given class.  The debugger supplies a context as well, so that temporary variables are accessible.  If there is an error, the requestor (usually a CodeController) is sent the message notify:at:in:.  If not, then the result of compilation is a parse tree (made up of subinstances of ParseNode) whose root is a MethodNode.  The parse tree can then generate code in a CompiledMethod (for compile or evaluate), or prettyPrint the code (for format), or produce a map from object code back to source code (used by debugger pc selection).  See also Parser, Encoder, ParseNode.'!
"-----------------------------------"!
!Compiler class methodsFor: 'accessing'!
preferredParserClass
	"Return a parser class which is appropriate for parsing methods compilable
	 by this compiler class.  Should be overwritten by subclasses."

	^Parser!
"-----------------------------------"!
!Compiler class methodsFor: 'evaluating'!
evaluate: textOrString
	^self evaluate: textOrString for: nil logged: false!
evaluate: textOrString for: anObject logged: logFlag
	^ self evaluate: textOrString for: anObject notifying: nil logged: logFlag!
evaluate: textOrString for: anObject notifying: aController logged: logFlag 	"Compile and execute the supplied text (see message to instance for details).
	If both were successful then, if logFlag is true, log (write) the text onto
	the changes file so that it can be replayed if necessary."
	| val |
	val _ self new
				evaluate: textOrString
				in: nil
				to: anObject
				notifying: aController
				ifFail: [^nil].
	logFlag ifTrue: [Smalltalk logChange: textOrString].
	^val!
evaluate: textOrString logged: logFlag
	^self evaluate: textOrString for: nil logged: logFlag!
evaluate: textOrString notifying: aController logged: logFlag
	^self evaluate: textOrString for: nil notifying: aController logged: logFlag!
"-----------------------------------"!
!Compiler methodsFor: 'error handling'!
editor
	^ requestor!
notify: aString at: position
	Cursor normal show.
	requestor == nil
		ifTrue: [^SyntaxError
					errorInClass: class
					withCode:
						(sourceStream contents
							copyReplaceFrom: position
							to: position - 1
							with: aString)
					errorString: aString]
		ifFalse: [^ requestor insertAndSelect: aString at: (position max: 1)]!
"-----------------------------------"!
!Compiler methodsFor: 'private'!
format: aStream noPattern: noPattern ifFail: failBlock
	| tree |
	tree _
		class parserClass new
			parse: aStream
			class: class
			noPattern: noPattern
			context: context
			notifying: self
			ifFail: [^failBlock value].
	^tree!
from: textOrStream class: aClass context: aContext notifying: req
	(textOrStream isKindOf: PositionableStream)
		ifTrue: [sourceStream _ textOrStream]
		ifFalse: [sourceStream _ ReadStream on: textOrStream asString].
	class _ aClass.
	context _ aContext.
	requestor _ req!
translate: aStream noPattern: noPattern ifFail: failBlock
	| tree |
	tree _
		class parserClass new
			parse: aStream
			class: class
			noPattern: noPattern
			context: context
			notifying: self
			ifFail: [^failBlock value].
	^tree!
"-----------------------------------"!
!Compiler methodsFor: 'public access'!
compile: textOrStream in: aClass notifying: aRequestor ifFail: failBlock
	"Answer with a parse tree whose root is a MethodNode.
	This can then be told to generate code as is done in the calls from Behavior"
	self from: textOrStream
		class: aClass
		context: nil
		notifying: aRequestor.
	^self
		translate: sourceStream
		noPattern: false
		ifFail: failBlock!
evaluate: textOrStream in: aContext to: receiver notifying: aRequestor ifFail: failBlock
	"Compiles the sourceStream into a parse tree, then generates code into a method.
	This method is then installed in the receiver's class so that it can be invoked.
	In other words, if receiver is not nil, then the text can refer to instance variables
	of that receiver (the Inspector uses this).  If aContext is not nil, the text can refer to
	temporaries in that context (the Debugger uses this).  If aRequestor is not nil, then
	it will receive a notify:at: message before the attempt to evaluate is aborted.

	Finally, the compiled method is invoked from here as DoIt or
	(in the case of evaluation in aContext) DoItIn:.

	The method is subsequently removed from the class, but this will not get done
	if the invocation causes an error which is terminated.  Such garbage can be
	removed by executing:
		Smalltalk allBehaviorsDo:
			[:cl | cl removeSelector: #DoIt; removeSelector: #DoItIn:]."

	| methodNode method value |
	Cursor execute show.
	class _ (aContext == nil ifTrue: [receiver] ifFalse: [aContext receiver]) class.
	self from: textOrStream class: class context: aContext notifying: aRequestor.
	methodNode _ self translate: sourceStream noPattern: true ifFail:
		[^failBlock value].
	method _ methodNode generate: #(0 0 0).
	context == nil
			ifTrue: [class addSelector: #DoIt withMethod: method.
					value _ receiver DoIt.
					class removeSelectorSimply: #DoIt.
					Cursor normal show.
					^value]
			ifFalse: [class addSelector: #DoItIn: withMethod: method.
					value _ receiver DoItIn: context.
					class removeSelectorSimply: #DoItIn:.
					Cursor normal show.
					^value]!
format: textOrStream in: aClass notifying: aRequestor
	"Compile a parse tree from the incoming text, and then print the parse tree to yield the answer, a string containing the original code in standard format."

	| aNode |
	self from: textOrStream
		class: aClass
		context: nil
		notifying: aRequestor.
	aNode _ self format: sourceStream noPattern: false ifFail: [^nil].
	^aNode decompileString!
parse: textOrStream in: aClass notifying: req
	"Compile the incoming text and answer with the resulting parse tree."
	self from: textOrStream class: aClass context: nil notifying: req.
	^self translate: sourceStream noPattern: false ifFail: []!
