Dictionary variableSubclass: #LiteralDictionary
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'System-Compiler'!
LiteralDictionary class
  instanceVariableNames: ''!
"-----------------------------------"!
LiteralDictionary comment:
'LiteralDictionaries check not only for equality but also for same class of their keys.
This avoids the problem of 0 being considered = to 0.0 as in Dictionaries, and it
also avoids the problem of 1.3 not being == to 1.3 (necessarily), as in IdentityDictionaries.'!
"-----------------------------------"!
!LiteralDictionary methodsFor: 'private'!
findKeyOrNil: key
	| location length probe pass |
	length _ self basicSize.
	pass _ 1.
	location _ key hash \\ length + 1.
	[(probe _ self basicAt: location) == nil or:
			[probe key class == key class and: [probe key = key]]]
		whileFalse:
			[(location _ location + 1) > length
				ifTrue:
					[location _ 1.
					pass _ pass + 1.
					pass > 2 ifTrue: [^self grow findKeyOrNil: key]]].
	^location!
