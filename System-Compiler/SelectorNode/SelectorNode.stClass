LeafNode subclass: #SelectorNode
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'System-Compiler'!
SelectorNode class
  instanceVariableNames: ''!
"-----------------------------------"!
SelectorNode comment:
'I am a parse tree leaf representing a selector'!
"-----------------------------------"!
!SelectorNode methodsFor: 'code generation'!
emit: stack args: nArgs on: strm
	self emit: stack
		args: nArgs
		on: strm
		super: false!
emit: stack args: nArgs on: aStream super: supered
	| index |
	stack pop: nArgs.
	(supered not and: [code - Send < SendLimit and: [nArgs < 3]])
		ifTrue:
			["short send"
			aStream nextPut:
					(code < Send
						ifTrue: [code]
						ifFalse: ["special" nArgs * 16 + code])]
		ifFalse:
			[index _ code < 256 ifTrue: [code - Send] ifFalse: [code \\ 256].
			(index < 32 and: [nArgs <= 7])
				ifTrue:
					["medium send"
					aStream nextPut: SendLong + (supered ifTrue: [2] ifFalse: [0]).
					aStream nextPut: nArgs * 32 + index]
				ifFalse:
					["long send"
					aStream nextPut: SendLong + 1 + (supered ifTrue: [2] ifFalse: [0]).
					aStream nextPut: nArgs.
					aStream nextPut: index]]!
size: encoder args: nArgs super: supered
	| index |
	self reserve: encoder.
	(supered not and: [code - Send < SendLimit and: [nArgs < 3]])
		ifTrue: [^1]. "short send"
	(supered and: [code < Send])
		ifTrue:
			["super special:"
			code _ self code: (encoder litIndex: key) type: 5].
	index _ code < 256
				ifTrue: [code - Send]
				ifFalse: [code \\ 256].
	(index < 32 and: [nArgs <= 7])
		ifTrue: [^2]. "medium send"
	^3 "long send"!
"-----------------------------------"!
!SelectorNode methodsFor: 'printing'!
printOn: aStream indent: level
	aStream nextPutAll: key!
