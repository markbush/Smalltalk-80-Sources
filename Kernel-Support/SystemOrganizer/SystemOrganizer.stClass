ClassOrganizer subclass: #SystemOrganizer
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Kernel-Support'!
SystemOrganizer class
  instanceVariableNames: ''!
"-----------------------------------"!
SystemOrganizer comment:
'Provides an organization for the classes in the system just as ClassOrganizer organizes the messages within a class.  The only difference is the filout/printing messages.'!
"-----------------------------------"!
!SystemOrganizer methodsFor: 'accessing'!
changeFromString: aString
	"Intercept to notify the system change set of the system reorganization."

	| file |
	SourceFiles == nil
		ifFalse:
			[file _ SourceFiles at: 2.
			file setToEnd; readWriteShorten.
			file cr; nextChunkPut: 'SystemOrganization changeFromString: ',
					SystemOrganization printString storeString.
			file cr; readOnly].
	Smalltalk changes reorganizeSystem.
	super changeFromString: aString.!
"-----------------------------------"!
!SystemOrganizer methodsFor: 'fileIn/Out'!
fileOutCategory: category
	| aFileStream |
	aFileStream _ Disk file: (category , '.st.') asFileName.
	self fileOutCategory: category on: aFileStream.
	aFileStream shorten; close!
fileOutCategory: category on: aFileStream
	| class first |
	first _ true.
	(self superclassOrder: category) do:
		[:class |
		first
			ifTrue: [first _ false]
			ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
		class
			fileOutOn: aFileStream
			moveSource: false
			toFile: 0.
		class removeFromChanges]!
printOutCategory: category
	"Create a file with readable version of the classes in this category.
	Default to fileOut."

	self fileOutCategory: category!
superclassOrder: category
	"Answer an ordered collection containing the classes in category (a string).
	The classes are ordered with superclasses first so they can be filed in."
	| list |
	list _
		(self listAtCategoryNamed: category asSymbol)
			collect: [:title | Smalltalk at: title].
	^ ChangeSet superclassOrder: list!
