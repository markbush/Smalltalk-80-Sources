Object subclass: #RemoteString
  instanceVariableNames: 'sourceFileNumber filePositionHi filePositionLo'
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Kernel-Support'!
RemoteString class
  instanceVariableNames: ''!
"-----------------------------------"!
RemoteString comment:
'Instance Variables:
	sourceFileNumber	<Integer> index into SourceFiles
	filePositionHi		<Integer>
	filePositionLo		<Integer>

I hold the file reference to the class comment (or any other piece of executable text).'!
"-----------------------------------"!
!RemoteString class methodsFor: 'instance creation'!
newFileNumber: sourceIndex position: anInteger
	"Answer a new instance of RemoteString for file indexed by sourceIndex,
	at the position anInteger.  Assumes that the string is already stored
	on the file and the instance will be used to access it."

	^self new fileNumber: sourceIndex position: anInteger!
newString: aString onFileNumber: sourceIndex
	"Answer a new instance of RemoteString for string, aString, on file indexed by
	sourceIndex.  Puts the string on the file and creates the remote reference."

	^self new string: aString onFileNumber: sourceIndex!
newString: aString onFileNumber: sourceIndex toFile: aFileStream
	"Answer a new instance of RemoteString for string, aString, on file indexed by
	sourceIndex.  Puts the string on the file, aFileStream, and creates the remote
	reference.  Assumes that the index corresponds properly to aFileStream."

	^self new string: aString onFileNumber: sourceIndex toFile: aFileStream!
"-----------------------------------"!
!RemoteString methodsFor: 'accessing'!
position
	"Answer the location of the string on a file."

	^(filePositionHi bitShift: 8) + filePositionLo!
sourceFileNumber
	"Answer the index of the file on which the string is stored."
	^sourceFileNumber!
string
	"Answer the receiver's string if remote files are enabled."

	| theFile |
	(SourceFiles == nil or: [sourceFileNumber == nil])
		ifTrue: [^'']
		ifFalse:
			[theFile _ SourceFiles at: sourceFileNumber.
			theFile position: (filePositionHi bitShift: 8) + filePositionLo.
			^theFile nextChunk]!
"-----------------------------------"!
!RemoteString methodsFor: 'private'!
fileNumber: sourceIndex position: anInteger
	sourceFileNumber _ sourceIndex.
	filePositionHi _ anInteger bitShift: -8.
	filePositionLo _ anInteger bitAnd: 255!
string: aString onFileNumber: anInteger
	"Store this as my string if source files exist"

	| theFile |
	SourceFiles == nil
		ifFalse:
			[theFile _ SourceFiles at: anInteger.
			theFile setToEnd; readWriteShorten; cr.
			self string: aString
				onFileNumber: anInteger
				toFile: theFile.
			theFile readOnly]!
string: aString onFileNumber: anInteger toFile: aFileStream
	"Store this as the receiver's string if source files exist."

	| position |
	sourceFileNumber _ anInteger.
	filePositionHi _ (position _ aFileStream position) bitShift: -8.
	filePositionLo _ position bitAnd: 255.
	aFileStream nextChunkPut: aString!
