Number subclass: #Integer
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Numeric-Numbers'!
Integer class
  instanceVariableNames: ''!
"-----------------------------------"!
Integer comment:
'I am a common abstract superclass for all Integer implementations.  My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.'!
"-----------------------------------"!
!Integer class methodsFor: 'instance creation'!
new: length neg: neg
	"Answer an instance of a large integer whose size is length.  neg is a flag determining
	whether the integer is negative or not."

	neg
		ifTrue: [^LargeNegativeInteger new: length]
		ifFalse: [^LargePositiveInteger new: length]!
readFrom: aStream
	"Answer a new Integer as described on the stream, aStream."

	^self readFrom: aStream radix: 10!
readFrom: aStream radix: radix
	"Answer an instance of one of my concrete subclasses. Initial minus sign accepted,
	and bases > 10 use letters A-Z. imbedded radix specifiers not allowed - use Integer
	class readFrom: for that. Answer zero (not an error) if there are no digits."

	| digit value neg |
	neg _ aStream peekFor: $-.
	value _ 0.
	[aStream atEnd]
		whileFalse:
			[digit _ aStream next digitValue.
			(digit < 0 or: [digit >= radix])
				ifTrue:
					[aStream skip: -1.
					neg ifTrue: [^value negated truncated"catch 0 minVal"].
					^value]
				ifFalse: [value _ value * radix + digit]].
	neg ifTrue: [^value negated truncated"catch 0 minVal"].
	^value!
"-----------------------------------"!
!Integer methodsFor: 'arithmetic'!
* aNumber
	"Multiply the receiver by the argument and answer with the result."

	aNumber isInteger
		ifTrue: [^(self
					digitMultiply: aNumber
					neg: self negative ~~ aNumber negative) truncated]
		ifFalse: [^self retry: #* coercing: aNumber]!
+ aNumber
	"Add the receiver to the argument and answer with the result."

	aNumber isInteger
		ifTrue: [self negative == aNumber negative
					ifTrue: [^(self digitAdd: aNumber) truncated]
					ifFalse: [^self digitSubtract: aNumber]]
		ifFalse: [^self retry: #+ coercing: aNumber]!
- aNumber
	"Subtract the argument from the receiver and answer with the result."

	aNumber isInteger
		ifTrue: [self negative == aNumber negative
					ifTrue: [^self digitSubtract: aNumber]
					ifFalse: [^self digitAdd: aNumber]]
		ifFalse: [^self retry: #- coercing: aNumber]!
/ aNumber
	"Divide the receiver by the argument and answer with the result if the division
	is exact."

	| quoRem |
	aNumber isInteger
		ifTrue:
			[quoRem _ self digitDiv: aNumber neg: self negative ~~ aNumber negative.
			(quoRem at: 2) = 0
				ifTrue: [^(quoRem at: 1) truncated]
				ifFalse: [^(Fraction numerator: self denominator: aNumber) reduced]]
		ifFalse: [^self retry: #/ coercing: aNumber]!
// aNumber
	"Divide the receiver by the argument and return the result.
	Round the result down towards negative infinity to make it a whole integer."

	| q |
	aNumber = 0 ifTrue: [^self error: 'division by 0'].
	self = 0 ifTrue: [^0].
	q _ self quo: aNumber.
	(q negative
		ifTrue: [q * aNumber ~= self]
		ifFalse: [q = 0 and: [self negative ~= aNumber negative]])
		ifTrue: [^q - 1"Truncate towards minus infinity"]
		ifFalse: [^q]!
\\ aNumber
	"Take the receiver modulo the argument and return the result.
	The result is the remainder rounded towards negative infinity, of the receiver
	divided by the argument. The remainder is defined in terms of //.
	The result has the same sign as the argument:
		e.g.  9\\4 = 1,  -9\\4 = 3,  9\\-4 =  -3,  -9\\-4 = -1 "

	^self - (self // aNumber * aNumber)!
quo: aNumber
	"Divide the receiver by the argument and return the result.
	Round the result down towards zero to make it a whole integer."

	| ng quo |
	aNumber isInteger
		ifTrue:
			[ng _ self negative == aNumber negative == false.
			quo _ (self digitDiv: aNumber neg: ng) at: 1.
			(quo lastDigit = 0 and: [quo digitLength >= 2])
				ifTrue: [^(quo growby: -1) truncated].
			^quo truncated]
		ifFalse: [^self retry: #quo: coercing: aNumber]!
"-----------------------------------"!
!Integer methodsFor: 'bit manipulation'!
allMask: mask
	"Treat the argument as a bit mask.  Answer true if all of the
	bits that are 1 in the argument are 1 in the receiver."

	^mask = (self bitAnd: mask)!
anyMask: mask
	"Treat the argument as a bit mask.  Answer true if any of the
	bits that are 1 in the argument are 1 in the receiver."

	^0 ~= (self bitAnd: mask)!
bitAnd: aNumber
	"Logical AND the twos-complement representation of the receiver with the
	twos-complement representation of the argument and return the result."

	| anInteger |
	anInteger _ aNumber truncated.
	^self
		digitLogic: anInteger
		op: #bitAnd:
		length: (self digitLength max: anInteger digitLength)!
bitAt: i
	"Answer the bit at the ith position."

	^(self bitAnd: (1 bitShift: i - 1)) = 0
		ifTrue: [0]
		ifFalse: [1]!
bitInvert
	"Answer an integer whose bits are the complement of the receiver."

	^-1 - self!
bitOr: aNumber
	"Logical OR the twos-complement representation of the receiver with the
	twos-complement representation of the argument and return the result."

	| anInteger |
	anInteger _ aNumber truncated.
	^self
		digitLogic: anInteger
		op: #bitOr:
		length: (self digitLength max: anInteger digitLength)!
bitShift: anInteger
	"Logical SHIFT the twos-complement representation of the receiver with the
	twos-complement representation of the argument and return the result.
	Shift left if the argument is positive, right if the argument is negative.
	Zeros are shifted in from the right in left shifts.
	The sign bit is extended in right shifts."

	| result abs |
	anInteger >= 0 ifTrue: [^(self
			digitLshift: (anInteger bitAnd: 7)
			bytes: (anInteger bitShift: -3)
			lookfirst: true) truncated].
	abs _ 0 - anInteger.
	result _ (self
				digitRshift: (abs bitAnd: 7)
				bytes: (abs bitShift: -3)
				lookfirst: self digitLength) truncated.
	(self negative and: [self anyBitTo: abs])
		ifTrue: [result _ result - 1].
	^result!
bitXor: aNumber
	"Logical XOR the twos-complement representation of the receiver with the
	twos-complement representation of the argument and return the result."

	| anInteger |
	anInteger _ aNumber truncated.
	^self
		digitLogic: anInteger
		op: #bitXor:
		length: (self digitLength max: anInteger digitLength)!
highBit
	"Answer with the index of the high order bit of the binary
	representation of the receiver."

	self subclassResponsibility!
noMask: mask
	"Treat the argument as a bit mask.  Answer true if none of the bits
	that are 1 in the argument are 1 in the receiver."

	^0 = (self bitAnd: mask)!
"-----------------------------------"!
!Integer methodsFor: 'coercing'!
coerce: aNumber
	^aNumber truncated!
generality
	^40!
"-----------------------------------"!
!Integer methodsFor: 'comparing'!
< anInteger
	"Compare the receiver with the argument and return true if the receiver is
	less than the argument. Otherwise return false."

	anInteger isInteger
		ifTrue: [self negative == anInteger negative
					ifTrue: [self negative
								ifTrue: [^(self digitCompare: anInteger) > 0]
								ifFalse: [^(self digitCompare: anInteger) < 0]]
					ifFalse: [^self negative]]
		ifFalse: [^self retry: #< coercing: anInteger]!
<= anInteger
	"Compare the receiver with the argument and return true if the receiver is
	less than or equal to the argument. Otherwise return false."

	^super <= anInteger!
= anInteger
	"Compare the receiver with the argument and return true if the receiver is
	equal to the argument. Otherwise return false."

	anInteger isInteger
		ifTrue: [anInteger positive & self positive | (anInteger negative & self negative)
					ifTrue: [^(self digitCompare: anInteger) = 0]
					ifFalse: [^false]]
		ifFalse: [^self retry: #= coercing: anInteger]!
> anInteger
	"Compare the receiver with the argument and return true if the receiver is
	greater than the argument. Otherwise return false."

	anInteger isInteger
		ifTrue: [self negative == anInteger negative
					ifTrue: [self negative
								ifTrue: [^(self digitCompare: anInteger) < 0]
								ifFalse: [^(self digitCompare: anInteger) > 0]]
					ifFalse: [^anInteger negative]]
		ifFalse: [^self retry: #> coercing: anInteger]!
>= anInteger
	"Compare the receiver with the argument and return true if the receiver is
	greater than or equal to the argument. Otherwise return false."

	^super >= anInteger!
hash
	^(self lastDigit bitShift: 8) + (self digitAt: 1)!
~= anInteger
	"Compare the receiver with the argument and return true if the receiver is
	not equal to the argument. Otherwise answer false."

	^super ~= anInteger!
"-----------------------------------"!
!Integer methodsFor: 'converting'!
asCharacter
	"Answer the Character whose value is the receiver."

	^Character value: self!
asFloat
	"Answer with a Float that represents the receiver."

	| factor sum |
	sum _ 0.0.
	factor _ self sign asFloat.
	1 to: self size do:
		[:i |
		sum _ (self digitAt: i) * factor + sum.
		factor _ factor * 256.0].
	^sum!
asFraction
	"Answer with a Fraction that represents the receiver."

	^Fraction numerator: self denominator: 1!
asInteger
	"Answer with the receiver itself."

	^self!
"-----------------------------------"!
!Integer methodsFor: 'enumerating'!
timesRepeat: aBlock
	"Evaluate the argument, aBlock, the number of times represented by
	the receiver."

	| count |
	count _ 1.
	[count <= self]
		whileTrue:
			[aBlock value.
			count _ count + 1]!
"-----------------------------------"!
!Integer methodsFor: 'factorization and divisibility'!
factorial
	"Answer the factorial of the receiver.  For example, 6 factorial == 6*5*4*3*2*1.
	Signal an error if the receiver is less than 0."

	self > 0
		ifTrue: [^self * (self - 1) factorial].
	self = 0
		ifTrue: [^1].
	self error: 'factorial invalid for: ' , self printString!
gcd: anInteger
	"Answer the greatest common divisor of the receiver and anInteger.
	Uses Roland Silver's algorithm"

	| m n d t |
	m _ self abs max: anInteger abs.
	n _ self abs min: anInteger abs.
	m \\ n = 0 ifTrue: [^n].
	"easy test, speeds up rest"
	d _ 0.
	[n even and: [m even]]
		whileTrue:
			[d _ d + 1.
			n _ n bitShift: -1.
			m _ m bitShift: -1].
	[n even]
		whileTrue: [n _ n bitShift: -1].
	[m even]
		whileTrue: [m _ m bitShift: -1].
	[m = n]
		whileFalse:
			[m > n
				ifTrue:
					[m _ m - n]
				ifFalse:
					[t _ m.
					m _ n - m.
					n _ t].
			"Make sure larger gets replaced"
			[m even]
				whileTrue: [m _ m bitShift: -1]].
	d = 0 ifTrue: [^m].
	^m bitShift: d!
lcm: n
	"Answer the least common multiple of the receiver and n."

	^self // (self gcd: n) * n!
"-----------------------------------"!
!Integer methodsFor: 'printing'!
isLiteral
	^true!
printOn: aStream
	self printOn: aStream base: 10	"default print radix"!
printOn: aStream base: b
	"Print a representation of the receiver on the stream, aStream, in
	base b where 2<=b<=256."

	| digits source dest i j pos t rem |
	i _ self digitLength.
	"Estimate size of result, conservatively"
	digits _ Array new: i * 8.
	pos _ 0.
	dest _
		i <= 1
			ifTrue: [self]
			ifFalse: [LargePositiveInteger new: i].
	source _ self.
	[i > 1]
		whileTrue:
			[rem _ 0.
			j _ i.
			[j > 0]
				whileTrue:
					[t _ (rem bitShift: 8) + (source digitAt: j).
					dest digitAt: j put: t // b.
					rem _ t \\ b.
					j _ j - 1].
			pos _ pos + 1.
			digits at: pos put: rem.
			source _ dest.
			(source digitAt: i) = 0 ifTrue: [i _ i - 1]].
	(dest digitAt: 1) printOn: aStream base: b.
	[pos > 0]
		whileTrue:
			[aStream nextPut: (Character digitValue: (digits at: pos)).
			pos _ pos - 1]!
printStringRadix: radix
	"Answer a String representing the receiver as a base radix integer."

	| aStream |
	aStream _ WriteStream on: (String new: 16).
	self printOn: aStream base: radix.
	^aStream contents!
storeStringRadix: radix
	"Answer a String representing the receiver as a base radix integer in Smalltalk syntax (e.g. 8r377)."

	| aStream |
	aStream _ WriteStream on: (String new: 16).
	radix ~= 10 ifTrue:
		[radix printOn: aStream.
		aStream nextPutAll: 'r'].
	self printOn: aStream base: radix.
	^aStream contents!
"-----------------------------------"!
!Integer methodsFor: 'private'!
anyBitTo: pos
	"Answer true if any bit from 1 to pos is non-zero, for testing for loss of significant
	bits when shifting right"

	1 to: pos - 1 // 8 do:
		[:i | (self digitAt: i) ~= 0 ifTrue: [^true]].
	^(self digitAt: pos + 7 // 8) anyMask: (#(1 3 7 15 31 63 127 255) at: pos - 1 \\ 8 + 1)!
copyto: x
	1 to: (self digitLength min: x digitLength)
		do: [:i | x digitAt: i put: (self digitAt: i)].
	^x!
denominator
	^1!
digitAdd: arg
	| len arglen i accum sum |
	accum _ 0.
	(len _ self digitLength) < (arglen _ arg digitLength) ifTrue: [len _ arglen].
	"Open code max: for speed"
	sum _ Integer new: len neg: self negative.
	i _ 1.
	[i <= len]
		whileTrue:
			[accum _ (accum bitShift: -8) + (self digitAt: i) + (arg digitAt: i).
			sum digitAt: i put: (accum bitAnd: 255).
			i _ i + 1].
	accum > 255
		ifTrue:
			[sum _ sum growby: 1.
			sum lastDigitGet: (accum bitShift: -8)].
	^sum!
digitCompare: arg
	| len arglen t5 t6 |
	len _ self digitLength.
	(arglen _ arg digitLength) ~= len
		ifTrue: [arglen > len
					ifTrue: [^-1]
					ifFalse: [^1]].
	[len > 0]
		whileTrue:
			[(t5 _ arg digitAt: len) ~= (t6 _ self digitAt: len)
				ifTrue: [t5 < t6
							ifTrue: [^1]
							ifFalse: [^-1]].
			len _ len - 1].
	^0!
digitDiv: arg neg: ng
	"Answer with an array of (quotient, remainder)"

	| quo rem ql d div dh dnh dl qhi qlo i j k l hi lo r3 a t |
	l _ self digitLength - arg digitLength + 1.
	l <= 0 ifTrue: [^Array with: 0 with: self].
	d _ 8 - arg lastDigit highBit.
	rem _
		self	digitLshift: d
			bytes: 0
			lookfirst: false.
	"makes a copy and shifts"
	div _
		arg digitLshift: d
			bytes: 0
			lookfirst: false.
	"shifts so high order word is >=128"
	quo _ Integer new: l neg: ng.
	dl _ div digitLength - 1.
	"Last actual byte of data"
	ql _ l.
	dh _ div digitAt: dl.
	dnh _
		 dl = 1
			ifTrue: [0]
			ifFalse: [div digitAt: dl - 1].
	1 to: ql do:
		[:k |
		"maintain quo*arg+rem=self"
		"Estimate rem/div by dividing the leading to bytes of rem by dh."
		"The estimate is q = qhi*16+qlo, where qhi and qlo are nibbles."
		j _ rem digitLength + 1 - k.
		"r1 _ rem digitAt: j."
		(rem digitAt: j) = dh
			ifTrue: [qhi _ qlo _ 15"i.e. q=255"]
			ifFalse:
				["Compute q = (r1,r2)//dh, t = (r1,r2)\\dh.
				Note that r1,r2 are bytes, not nibbles.
				Be careful not to generate intermediate results exceeding 13 bits."
				"r2 _ (rem digitAt: j - 1)."
				t _ ((rem digitAt: j) bitShift: 4) + ((rem digitAt: j - 1) bitShift: -4).
				qhi _ t // dh.
				t _ (t \\ dh bitShift: 4) + ((rem digitAt: j - 1) bitAnd: 15).
				qlo _ t // dh.
				t _ t \\ dh.
				"Next compute (hi,lo) _ q*dnh"
				hi _ qhi * dnh.
				lo _ qlo * dnh + ((hi bitAnd: 15) bitShift: 4).
				hi _ (hi bitShift: -4) + (lo bitShift: -8).
				lo _ lo bitAnd: 255.
				"Correct overestimate of q.
				Max of 2 iterations through loop -- see Knuth vol. 2"
				r3 _
					j < 3 ifTrue: [0]
						 ifFalse: [rem digitAt: j - 2].
				[(t < hi or: [t = hi and: [r3 < lo]]) and:
						["i.e. (t,r3) < (hi,lo)"
						qlo _ qlo - 1.
						lo _ lo - dnh.
						lo < 0
							ifTrue:
								[hi _ hi - 1.
								lo _ lo + 256].
						hi >= dh]]
					whileTrue: [hi _ hi - dh].
				qlo < 0
					ifTrue:
						[qhi _ qhi - 1.
						qlo _ qlo + 16]].
		"Subtract q*div from rem"
		l _ j - dl.
		a _ 0.
		1 to: div digitLength do:
			[:i |
			hi _ (div digitAt: i) * qhi.
			lo _
				a + (rem digitAt: l)
					- ((hi bitAnd: 15) bitShift: 4)
					- ((div digitAt: i) * qlo).
			rem digitAt: l put: (lo bitAnd: 255).
			a _ (lo bitShift: -8) - (hi bitShift: -4).
			l _ l + 1].
		a < 0
			ifTrue:
				["Add div back into rem, decrease q by 1"
				qlo _ qlo - 1.
				l _ j - dl.
				a _ 0.
				1 to: div digitLength do:
					[:i |
					a _ (a bitShift: -8) + (rem digitAt: l) + (div digitAt: i).
					rem digitAt: l put: (a bitAnd: 255).
					l _ l + 1]].
		quo digitAt: quo digitLength + 1 - k put: (qhi bitShift: 4) + qlo].
	rem _
		rem digitRshift: d
			bytes: 0
			lookfirst: dl.
	^Array with: quo with: rem!
digitLogic: arg op: op length: len
	| result i neg1 neg2 rneg z1 z2 rz b1 b2 b rdigits |
	neg1 _ self negative.
	neg2 _ arg negative.
	rneg _
		((neg1 ifTrue: [-1] ifFalse: [0])
			perform: op
			with: (neg2
					ifTrue: [-1]
					ifFalse: [0])) < 0.
	result _ Integer new: len neg: rneg.
	rz _ z1 _ z2 _ true.
	rdigits _ 1.
	1 to: result digitLength do:
		[:i |
		b1 _ self digitAt: i.
		neg1
			ifTrue: [b1 _ z1
						ifTrue: [b1 = 0
									ifTrue: [0]
									ifFalse:
										[z1 _ false.
										256 - b1]]
						ifFalse: [255 - b1]].
		b2 _ arg digitAt: i.
		neg2
			ifTrue: [b2 _ z2
						ifTrue: [b2 = 0
									ifTrue: [0]
									ifFalse:
										[z2 _ false.
										256 - b2]]
						ifFalse: [255 - b2]].
		b _ b1 perform: op with: b2.
		b = 0
			ifTrue:
				[result digitAt: i put: 0]
			ifFalse:
				[rdigits _ i.
				result
					digitAt: i
					put: (rneg
							ifTrue: [rz ifTrue:
											[rz _ false.
											256 - b]
										ifFalse: [255 - b]]
						ifFalse: [b])]].
	rdigits ~= result digitLength ifTrue: [^(result growto: rdigits) truncated].
	^result truncated!
digitLshift: n bytes: b lookfirst: a
	| x f m len r digit |
	"shift by 8*b+n bits, 0<=n<8.  a true means check for a leading zero byte in the
	result "
	x _ 0.
	f _ n - 8.
	m _ 255 bitShift: 0 - n.
	len _ self digitLength + 1 + b.
	(a and: [(self lastDigit bitShift: f) = 0])
		ifTrue: [len _ len - 1].
	r _ Integer new: len neg: self negative.
	1 to: b do: [:i | r digitAt: i put: 0].
	1 to: len - b do:
		[:i |
		digit _ self digitAt: i.
		r
			digitAt: i + b
			put: (((digit bitAnd: m) bitShift: n) bitOr: x).
		"Avoid values > 8 bits"
		x _ digit bitShift: f].
	^r!
digitMultiply: arg neg: ng
	| prod pl carry digit i j k xh xl low high |
	((arg digitAt: 1) = 0 and: [arg digitLength = 1]) ifTrue: [^0].
	pl _ self digitLength + arg digitLength.
	prod _ Integer new: pl neg: ng.
	"prod starts out all zero"
	1 to: self digitLength do:
		[:i |
		(digit _ self digitAt: i) ~= 0
			ifTrue:
				[k _ i.
				carry _ 0.
				xh _ digit bitShift: -4.
				xl _ digit bitAnd: 15.
				"Loop invariant: 0<=carry<=0377, k=i+j-1"
				1 to: arg digitLength do:
					[:j |
					high _ (arg digitAt: j) * xh.
					"Do double-precision multiply in two parts.
					Integers must be at least 13 bits for this to work."
					low _ (arg digitAt: j)
								* xl + ((high bitAnd: 15)
									bitShift: 4) + carry + (prod digitAt: k).
					carry _ (high bitShift: -4) + (low bitShift: -8).
					prod digitAt: k put: (low bitAnd: 255).
					k _ k + 1].
				prod digitAt: k put: carry]].
	(prod digitAt: pl) = 0 ifTrue: [^(prod growby: -1) truncated].
	^prod truncated!
digitRshift: anInteger bytes: b lookfirst: a
	 "shift right 8*b+anInteger bits, 0<=n<8.  Discard all digits beyond a,
	and all zeroes at or below a."

	| n x i r f m digit count|
	n _ 0 - anInteger.
	x _ 0.
	f _ n + 8.
	i _ a.
	m _ 255 bitShift: 0 - f.
	digit _ self digitAt: i.
	[((digit bitShift: n) bitOr: x) = 0 and: [i ~= 1]] whileTrue:
		[x _ digit bitShift: f "Can't exceed 8 bits".
		i _ i - 1.
		digit _ self digitAt: i].
	i <= b ifTrue: [^Integer new: 0 neg: self negative].  "All bits lost"
	r _ Integer new: i - b neg: self negative.
	count _ i.
	x _ (self digitAt: b + 1) bitShift: n.
	b + 1 to: count do:
		[:i | digit _ self digitAt: i + 1.
		r digitAt: i - b put: (((digit bitAnd: m) bitShift: f) bitOr: x)
			"Avoid values > 8 bits".
		x _ digit bitShift: n].
	^r!
digitSubtract: arg
	| smaller larger i z sum sl al ng lastdigit |
	sl _ self digitLength.
	al _ arg digitLength.
	(sl = al
		ifTrue:
			[[(self digitAt: sl) = (arg digitAt: sl) and: [sl > 1]]
				whileTrue: [sl _ sl - 1].
			al _ sl.
			(self digitAt: sl) < (arg digitAt: sl)]
		ifFalse: [sl < al])
		ifTrue:
			[larger _ arg.
			smaller _ self.
			ng _ self negative == false.
			sl _ al]
		ifFalse:
			[larger _ self.
			smaller _ arg.
			ng _ self negative].
	sum _ Integer new: sl neg: ng.
	lastdigit _ 1.
	z _ 0.
	"Loop invariant is -1<=z<=1"
	i _ 1.
	[i <= sl]
		whileTrue:
			[z _ z + (larger digitAt: i) - (smaller digitAt: i).
			(sum digitAt: i put: (z bitAnd: 255)) ~= 0 ifTrue: [lastdigit _ i].
			z _ z bitShift: -8.
			i _ i + 1].
	lastdigit = sl ifFalse: [sum _ sum growto: lastdigit].
	^sum truncated!
growby: n
	^self growto: self digitLength + n!
growto: n
	^self copyto: (self species new: n)!
numerator
	^self!
"-----------------------------------"!
!Integer methodsFor: 'system primitives'!
lastDigit
	"Answer the last digit of the integer."

	^self digitAt: self digitLength!
lastDigitGet: digit
	"Store the argument, digit, as the last digit of the integer."

	^self at: self digitLength put: digit!
"-----------------------------------"!
!Integer methodsFor: 'testing'!
even
	^((self digitAt: 1) bitAnd: 1) = 0!
isInteger
	^true!
"-----------------------------------"!
!Integer methodsFor: 'truncation and round off'!
ceiling!
floor!
rounded!
truncated!
