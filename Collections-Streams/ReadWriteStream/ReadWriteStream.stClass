WriteStream subclass: #ReadWriteStream
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Collections-Streams'!
ReadWriteStream class
  instanceVariableNames: ''!
"-----------------------------------"!
ReadWriteStream comment:
'I am a positionable stream into which we can both read and write.'!
"-----------------------------------"!
!ReadWriteStream methodsFor: 'accessing'!
contents
	"Answer with a copy of my collection from 1 to readLimit."

	readLimit _ readLimit max: position.
	^collection copyFrom: 1 to: readLimit!
next
	"Return the next object in the Stream represented by the receiver. Fail if
	the collection of this stream is not an Array or a String. Fail if the
	stream is positioned at its end, or if the position is out of bounds in the
	collection. Optional. See Object documentation whatIsAPrimitive."

	<primitive: 65>
	"treat me as a FIFO"
	position >= readLimit
		ifTrue: [^nil]
		ifFalse: [^collection at: (position _ position + 1)]!
"-----------------------------------"!
!ReadWriteStream methodsFor: 'file status'!
close
	"Prsumably sets the status of the stream to be closed.
	This message does nothing at this level, but is included for FileStream
	compatibility."
	^self!
"-----------------------------------"!
!ReadWriteStream methodsFor: 'fileIn/Out'!
fileIn
	"This is special for reading expressions from text that has been formatted
	with exclamation delimitors.  The expressions are read and passed to the
	Compiler.  Answer the result of compilation."

	| val |
	Cursor read showWhile:
		[[self atEnd]
			whileFalse:
				[self skipSeparators.
				val _ (self peekFor: $!!)
							ifTrue: [(Compiler evaluate: self nextChunk logged: false)
									scanFrom: self]
							ifFalse: [Compiler evaluate: self nextChunk logged: true]].
		self close].
	^val!
fileOutChanges
	"Append to the receiver a description of all system changes."

	Cursor write showWhile:
		[self timeStamp.
		Smalltalk changes fileOutOn: self.
		self close]!
fileOutChangesFor: class
	"Append to the receiver a description of the changes to the argument, class."

	Cursor write showWhile:
		[self timeStamp.
		Smalltalk changes fileOutChangesFor: class on: self.
		self close]!
timeStamp
	"Append the current time to the receiver as a chunk."

	| aStream |
	aStream _ WriteStream on: (String new: 16).
	Smalltalk timeStamp: aStream.
	self nextChunkPut: aStream contents printString.	"double quotes and !!s"
	self cr; cr!
