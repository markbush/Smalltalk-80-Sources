ClassDescription subclass: #Metaclass
  instanceVariableNames: 'thisClass'
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Kernel-Classes'!
Metaclass class
  instanceVariableNames: ''!
"-----------------------------------"!
Metaclass comment:
'Instance Variables:
	thisClass	<Class> the chief instance of me, which I describe

Metaclasses add instance-specific behavior to various classes in the system.  This typically includes messages for initializing class variables and instance creation messages particular to that class.  There is only one instance of a metaclass, namely the class (thisClass) which is being described.  A metaclass shares the class variables of its instance.

[Subtle] In general, the superclass hierarchy for metaclasses parallels that for classes.  Thus,
	Integer superclass == Number, and
	Integer class superclass == Number class.
However there is a singularity at Object.  Here the class hierarchy terminates, but the metaclass hierarchy must wrap around to Class, since ALL metaclasses are subclasses of Class.  Thus,
	Object superclass == nil, and
	Object class superclass == Class.'!
"-----------------------------------"!
!Metaclass class methodsFor: 'instance creation'!
subclassOf: superMeta
	"Answer a metaclass that is a subclass of metaclass superMeta."

	^self new subclassOf: superMeta!
"-----------------------------------"!
!Metaclass methodsFor: 'accessing'!
name
	"Answer a String that is the name of the receiver, either Metaclass or the
	name of the receiver's class followed by the ' class'."

	thisClass == nil
		ifTrue: [^'a Metaclass']
		ifFalse: [^thisClass name , ' class']!
soleInstance
	"The receiver has only one instance.  Answer it."

	^thisClass!
"-----------------------------------"!
!Metaclass methodsFor: 'class hierarchy'!
instHasMultipleSuperclasses
	^false!
name: newName inEnvironment: environ subclassOf: sup and: others instanceVariableNames: instVarString variable: v words: w pointers: p classVariableNames: classVarString poolDictionaries: poolString category: categoryName comment: commentString changed: changed
	"Create a new metaclass from the information provided in the arguments.
	Create an error if the name does not begin with an uppercase letter or if a
	class of the same name already exists."

	| wasPresent oldClass newClass invalidFields invalidMethods |
	newName first isUppercase
		ifFalse:
			[self error: 'Class names must be capitalized'.
			^false].
	(wasPresent _ environ includesKey: newName)
		ifTrue:
			[oldClass _ environ at: newName.
			(oldClass isKindOf: Behavior)
				ifFalse:
					[self error: newName , ' already exists!!  Proceed will store over it'.
					wasPresent _ false.
					oldClass _ self newNamed: newName otherSupers: others]]
		ifFalse: [oldClass _ self newNamed: newName otherSupers: others].
	newClass _ oldClass copy.
	invalidFields _
		changed | (newClass
					subclassOf: sup
					oldClass: oldClass
					instanceVariableNames: instVarString
					variable: v
					words: w
					pointers: p
					ifBad: [^false]).
	invalidFields ifFalse: [newClass obsolete.  newClass _ oldClass].
	invalidMethods _ invalidFields | (newClass declare:  classVarString) | (newClass sharing: poolString).
	commentString == nil ifFalse: [newClass comment: commentString].
	(environ includesKey: newName)
		ifFalse:
			[environ declare: newName from: Undeclared.
			environ at: newName put: newClass].
	SystemOrganization classify: newClass name under: categoryName asSymbol.
	newClass
		validateFrom: oldClass
		in: environ
		instanceVariableNames: invalidFields
		methods: invalidMethods.
	"update subclass lists"
	newClass superclasses do:
		[:sup | sup removeSubclass: oldClass; addSubclass: newClass].
	"Update Changes"
	wasPresent
		ifTrue: [Smalltalk changes changeClass: newClass]
		ifFalse: [Smalltalk changes addClass: newClass].
	"Now check for possible conflicting definitions in superclasses"
	invalidFields ifTrue:
		[newClass copyMethods.
		newClass class copyMethods].
	^newClass!
name: newName inEnvironment: environ subclassOf: sup instanceVariableNames: instVarString variable: v words: w pointers: p classVariableNames: classVarString poolDictionaries: poolString category: categoryName comment: commentString changed: changed
	"Create a new metaclass from the information provided in the arguments.
	Create an error if the name does not begin with an uppercase letter or if a
	class of the same name already exists."

	| wasPresent oldClass newClass invalidFields invalidMethods |
	newName first isUppercase
		ifFalse:
			[self error: 'Class names must be capitalized'.
			^false].
	(wasPresent _ environ includesKey: newName)
		ifTrue:
			[oldClass _ environ at: newName.
			(oldClass isKindOf: Behavior)
				ifFalse:
					[self error: newName , ' already exists!!  Proceed will store over it'.
					wasPresent _ false.
					oldClass _ self newNamed: newName]]
		ifFalse: [oldClass _ self newNamed: newName].
	newClass _ oldClass copy.
	invalidFields _
		changed | (newClass
					subclassOf: sup
					oldClass: oldClass
					instanceVariableNames: instVarString
					variable: v
					words: w
					pointers: p
					ifBad: [^false]).
	invalidFields ifFalse: [newClass obsolete.  newClass _ oldClass].
	invalidMethods _ invalidFields | (newClass declare:  classVarString) | (newClass sharing: poolString).
	commentString == nil ifFalse: [newClass comment: commentString].
	(environ includesKey: newName)
		ifFalse:
			[environ declare: newName from: Undeclared.
			environ at: newName put: newClass].
	SystemOrganization classify: newClass name under: categoryName asSymbol.
	newClass
		validateFrom: oldClass
		in: environ
		instanceVariableNames: invalidFields
		methods: invalidMethods.
	"update subclass lists"
	newClass superclass removeSubclass: oldClass.
	newClass superclass addSubclass: newClass.
	"Update Changes"
	wasPresent
		ifTrue: [Smalltalk changes changeClass: newClass]
		ifFalse: [Smalltalk changes addClass: newClass].
	^newClass!
subclasses
	"Answer the receiver's subclasses."
	| temp |
	self == Class class
		ifTrue: ["Meta-Object is exceptional subclass of Class"
				temp _ thisClass subclasses copy.
				temp remove: Object class.
				^temp collect: [:aSubClass | aSubClass class]].
	thisClass == nil
		ifTrue: [^Set new]
		ifFalse: [^thisClass subclasses collect: [:aSubClass | aSubClass class]]!
"-----------------------------------"!
!Metaclass methodsFor: 'class variables'!
addClassVarName: aString
	^thisClass addClassVarName: aString!
classPool
	"Answer the dictionary of class variables."

	^thisClass classPool!
"-----------------------------------"!
!Metaclass methodsFor: 'compiling'!
scopeHas: name ifTrue: assocBlock
	^thisClass scopeHas: name ifTrue: assocBlock!
"-----------------------------------"!
!Metaclass methodsFor: 'copying'!
copy
	"Make a copy of the receiver without a list of subclasses.  Share the
	reference to the sole instance."

	| copy t |
	t _ thisClass.
	thisClass _ nil.
	copy _ super copy.
	thisClass _ t.
	^copy!
copyForValidation
	"Special copy for ClassDescription validateFrom:in:fields:methods:.  Answer a copy
	of the receiver without the subclasses."

	^super copy!
"-----------------------------------"!
!Metaclass methodsFor: 'fileIn/Out'!
fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex
	"File me out on aFileStream."

	super
		fileOutOn: aFileStream
		moveSource: moveSource
		toFile: fileIndex.
	(methodDict includesKey: #initialize)
		ifTrue:
			[aFileStream cr.
			aFileStream cr.
			aFileStream nextChunkPut: thisClass name , ' initialize'.
			aFileStream cr]!
nonTrivial
	^self instVarNames size > 0 or: [methodDict size > 0 or: [self comment size > 0]]!
"-----------------------------------"!
!Metaclass methodsFor: 'initialize-release'!
instanceVariableNames: instVarString
	"Declare additional variables for my instances."

	| newMeta invalid ok |
	newMeta _ self copyForValidation.
	invalid _ newMeta
				subclassOf: superclass
				oldClass: self
				instanceVariableNames: instVarString
				variable: false
				words: true
				pointers: true
				ifBad: [^false].
	invalid
		ifTrue:
			[ok _ newMeta
						validateFrom: self
						in: Smalltalk
						instanceVariableNames: true
						methods: true.
			Smalltalk changes changeClass: self.
			^ok]!
newNamed: aSymbol
	"Answer a new instance of me whose name is the argument, aSymbol."
	^(Metaclass subclassOf: self) new
		superclass: Object
		methodDict: MethodDictionary new
		format: -8192
		name: aSymbol
		organization: ClassOrganizer new
		instVarNames: nil
		classPool: nil
		sharedPools: nil!
newNamed: aSymbol otherSupers: others
	"Answer a new instance of me whose name is the argument, aSymbol."
	^ (MetaclassForMultipleInheritance subclassOf: self and: others) new
		superclass: Object
		methodDict: MethodDictionary new
		format: -8192
		name: aSymbol
		organization: ClassOrganizer new
		instVarNames: nil
		classPool: nil
		sharedPools: nil!
obsolete
	"Invalidate and recycle local messages.  Remove the receiver from its superclass'
	subclass list."

	thisClass_ nil.
	super obsolete!
subclassOf: superMeta
	"Change the receiver to be a subclass of the argument, superMeta, a metaclass.
	Reset the receiver's method dictionary and properties."

	superclass _ superMeta.
	methodDict _ MethodDictionary new.
	format _ superMeta format.
	instanceVariables _ nil!
superclass: superMeta
	"Change the receiver's superclass to be the argument, superMeta, a metaclass."

	superclass _ superMeta!
"-----------------------------------"!
!Metaclass methodsFor: 'instance creation'!
new
	"The receiver can only have one instance.  Create it or complain that
	one already exists."

	thisClass == nil
		ifTrue: [^thisClass _ super new]
		ifFalse: [self error: 'A Metaclass should only have one instance!!']!
"-----------------------------------"!
!Metaclass methodsFor: 'instance variables'!
addInstVarName: aString
	"Add the argument, aString, as one of the receiver's instance variables."

	| fullString |
	fullString _ aString.
	self instVarNames do: [:aString2 | fullString _ aString2 , ' ' , fullString].
	self instanceVariableNames: fullString!
removeInstVarName: aString
	"Remove the argument, aString, as one of the receiver's instance variables."


	| newArray newString |
	(self instVarNames includes: aString)
		ifFalse: [self error: aString , ' is not one of my instance variables'].
	newArray _ self instVarNames copyWithout: aString.
	newString _ ''.
	newArray do: [:aString2 | newString _ aString2 , ' ' , newString].
	self instanceVariableNames: newString!
"-----------------------------------"!
!Metaclass methodsFor: 'printing'!
definition
	"Answer with a string that defines me"

	| aStream names |
	aStream _ WriteStream on: (String new: 300).
	self printOn: aStream.
	aStream nextPutAll: '
	instanceVariableNames: '''.
	names _ self instVarNames.
	1 to: names size do: [:i | aStream nextPutAll: (names at: i); space].
	aStream nextPut: $'.
	^ aStream contents!
"-----------------------------------"!
!Metaclass methodsFor: 'testing'!
isMeta
	^ true!
isObsolete
	"Answer whether the receiver is an obsolete metaclass."

	^thisClass == nil or: [thisClass ~~ (Smalltalk at: thisClass name ifAbsent: [nil])]
	"should only be true for obsolete metaclass"!
