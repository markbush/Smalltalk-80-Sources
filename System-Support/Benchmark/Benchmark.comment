Class Benchmark contains facilities for timing the performance of your system and reporting the results.

There are built-in methods for timing certain activities that occur frequently in using Smalltalk-80.  There are also facilities for timing the execution of most byte codes.

It is intended that comparison of timing information between implementations and over time will allow implementors to discover where their systems could stand improvement and to gauge the value of intended performance enhancements.

The main interface to these facilities is through sending the messsage
	Benchmark new test: aBlock labeled: aLabel repeated: howManyTimes.
This will cause howManyTimes executions of aBlock and report the results, using aLabel for ease of identification.

The results can be reported in several different ways.  The default is to print a fairly verbose report in the Transcript.  But the reporting mode can be altered by sending the Benchmark which is going to perform a given test the message setOutputParameters.  This gives you the option of directing the report to a file or an internal stream and also of shortening the feedback in the Transcript.  The system automatically invites you to respecify the output parameters (e.g. naming a new output report file) whenever you test more than one thing at a time, using the message testList: (as in testStandardTests below).

Try an example.  To time your system's performance of simple addition, say
	Benchmark new test3plus4
or to time pushing an instance variable onto the stack, say
	Benchmark new testLoadInstVar.

If you had wished to print the results on a file or internal stream, you could have said
	Benchmark new setOutputParameters testLoadInstVar.

If you look at the code for these methods (e.g. testLoadInstVar), you will notice that it does a few things that you didn't want to time, such as sending the message ==, or popping things off the stack.  This is to make the compiler happy or to keep the stack from overflowing.  So you may want to subtract this stuff out.  (Use systems of equations.  Be clever!)

The message category "macro operations" contains methods for timing more involved activities such as compiling, decompiling, editing text, formatting text, etc.

There is a message to class Benchmark which will invoke all the built-in benchmarks sequentially.  Say
	Benchmark testStandardTests.

There are also facilities for examining or automatically comparing the output files or streams generated by testing a bunch of benchmarks sequentially.  See the "output" category.  Be sure to read the comment to the streamsRatherThanFiles code.

Have fun and share your results with a friend.
