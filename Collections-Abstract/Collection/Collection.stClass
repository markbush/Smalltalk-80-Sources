Object subclass: #Collection
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Collections-Abstract'!
Collection class
  instanceVariableNames: ''!
"-----------------------------------"!
Collection comment:
'I am the abstract class of all collection classes.'!
"-----------------------------------"!
!Collection class methodsFor: 'instance creation'!
with: anObject
	"Answer a new instance of me containing anObject."

	| newCollection |
	newCollection _ self new.
	newCollection add: anObject.
	^newCollection!
with: firstObject with: secondObject
	"Answer a new instance of me containing the two arguments as elements."

	| newCollection |
	newCollection _ self new.
	newCollection add: firstObject.
	newCollection add: secondObject.
	^newCollection!
with: firstObject with: secondObject with: thirdObject
	"Answer with a new instance of me containing the three arguments as elements."

	| newCollection |
	newCollection _ self new.
	newCollection add: firstObject.
	newCollection add: secondObject.
	newCollection add: thirdObject.
	^newCollection!
with: firstObject with: secondObject with: thirdObject with: fourthObject
	"Answer a new instance of me, containing the four arguments as the elements."

	| newCollection |
	newCollection _ self new.
	newCollection add: firstObject.
	newCollection add: secondObject.
	newCollection add: thirdObject.
	newCollection add: fourthObject.
	^newCollection!
"-----------------------------------"!
!Collection methodsFor: 'accessing'!
size
	"Answer how many elements the receiver contains."

	| tally |
	tally _ 0.
	self do: [:each | tally _ tally + 1].
	^tally!
"-----------------------------------"!
!Collection methodsFor: 'adding'!
add: newObject
	"Include newObject as one of the receiver's elements.  Answer newObject.
	This message should not be sent to instances of subclasses of ArrayedCollection."

	self subclassResponsibility!
addAll: aCollection
	"Include all the elements of aCollection as the receiver's elements.  Answer
	aCollection."

	aCollection do: [:each | self add: each].
	^aCollection!
"-----------------------------------"!
!Collection methodsFor: 'converting'!
asBag
	"Answer a new instance of Bag whose elements are the elements of
	the receiver."

	| aBag |
	aBag _ Bag new.
	self do: [:each | aBag add: each].
	^aBag!
asOrderedCollection
	"Answer a new instance of OrderedCollection whose elements are the elements of
	the receiver.  The order in which elements are added depends on the order in
	which the receiver enumerates its elements.  In the case of unordered collections,
	the ordering is not necessarily the same for multiple requests for the conversion."

	| anOrderedCollection |
	anOrderedCollection _ OrderedCollection new: self size.
	self do: [:each | anOrderedCollection addLast: each].
	^anOrderedCollection!
asSet
	"Answer a new instance of Set whose elements are the unique elements of
	the receiver."

	| aSet |
	aSet _ Set new: self size.
	self do: [:each | aSet add: each].
	^aSet!
asSortedCollection
	"Answer a new instance of SortedCollection whose elements are the elements of
	the receiver.  The sort order is the default less than or equal ordering."

	| aSortedCollection |
	aSortedCollection _ SortedCollection new: self size.
	aSortedCollection addAll: self.
	^aSortedCollection!
asSortedCollection: aBlock
	"Answer a new instance of SortedCollection whose elements are the elements of
	the receiver.  The sort order is defined by the argument, aBlock."

	| aSortedCollection |
	aSortedCollection _ SortedCollection new: self size.
	aSortedCollection sortBlock: aBlock.
	aSortedCollection addAll: self.
	^aSortedCollection!
"-----------------------------------"!
!Collection methodsFor: 'enumerating'!
collect: aBlock
	"Evaluate aBlock with each of the receiver's elements as the argument.  Collect the
	resulting values into a collection that is like the receiver.  Answer the new
	collection. "

	| newCollection |
	newCollection _ self species new.
	self do: [:each | newCollection add: (aBlock value: each)].
	^newCollection!
detect: aBlock
	"Evaluate aBlock with each of the receiver's elements as the argument.
	Answer the first element for which aBlock evaluates to true."

	^self detect: aBlock ifNone: [self errorNotFound]!
detect: aBlock ifNone: exceptionBlock
	"Evaluate aBlock with each of the receiver's elements as the argument.
	Answer the first element for which aBlock evaluates to true."

	self do: [:each | (aBlock value: each) ifTrue: [^each]].
	^exceptionBlock value!
do: aBlock
	"Evaluate aBlock with each of the receiver's elements as the argument."

	self subclassResponsibility!
inject: thisValue into: binaryBlock
	"Accumulate a running value associated with evaluating the argument,
	binaryBlock, with the current value and the receiver as block arguments.
	The initial value is the value of the argument, thisValue.
		For instance, to sum a collection, use:
			collection inject: 0 into: [:subTotal :next | subTotal + next]."

	| nextValue |
	nextValue _ thisValue.
	self do: [:each | nextValue _ binaryBlock value: nextValue value: each].
	^nextValue!
reject: aBlock
	"Evaluate aBlock with each of the receiver's elements as the argument.
	Collect into a new collection like the receiver, only those elements for which
	aBlock evaluates to false.  Answer the new collection."

	^self select: [:element | (aBlock value: element) == false]!
select: aBlock
	"Evaluate aBlock with each of the receiver's elements as the argument.
	Collect into a new collection like the receiver, only those elements for which
	aBlock evaluates to true.  Answer the new collection."

	| newCollection |
	newCollection _ self species new.
	self do: [:each | (aBlock value: each) ifTrue: [newCollection add: each]].
	^newCollection!
"-----------------------------------"!
!Collection methodsFor: 'printing'!
printOn: aStream
	| tooMany |
	tooMany _ aStream position + self maxPrint.
	aStream nextPutAll: self class name, ' ('.
	self do:
		[:element |
		aStream position > tooMany ifTrue: [aStream nextPutAll: '...etc...)'. ^self].
		element printOn: aStream.
		aStream space].
	aStream nextPut: $)!
storeOn: aStream
	| noneYet |
	aStream nextPutAll: '(('.
	aStream nextPutAll: self class name.
	aStream nextPutAll: ' new)'.
	noneYet _ true.
	self do:
		[:each |
		noneYet
			ifTrue: [noneYet _ false]
			ifFalse: [aStream nextPut: $;].
		aStream nextPutAll: ' add: '.
		aStream store: each].
	noneYet ifFalse: [aStream nextPutAll: '; yourself'].
	aStream nextPut: $)!
"-----------------------------------"!
!Collection methodsFor: 'private'!
emptyCheck
	self isEmpty ifTrue: [self errorEmptyCollection]!
errorEmptyCollection
	self error: 'this collection is empty'!
errorNoMatch
	self error: 'collection sizes do not match'!
errorNotFound
	self error: 'Object is not in the collection.'!
errorNotKeyed
	self error: self class name, 's do not respond to keyed accessing messages.'!
growSize
	"Answer an amount by which the receiver should grow to make room for more elements (in response to the message 'grow')."

	self basicSize >= self maxSize ifTrue: [self error: 'unable to grow this collection'].
	^(self basicSize max: 2) min: self maxSize - self basicSize!
maxPrint
	"Answer the maximum number of characters to print with printOn:."
	^5000!
maxSize
	"Answer the largest basicSize which is valid for the receiver's class."

	^65486 "for VM3 interpreter DoradoST80Aug19"!
"-----------------------------------"!
!Collection methodsFor: 'removing'!
remove: oldObject
	"Remove oldObject as one of the receiver's elements.  Answer oldObject unless
	no element is equal to oldObject, in which case, create an error message."

	^self remove: oldObject ifAbsent: [self errorNotFound]!
remove: oldObject ifAbsent: anExceptionBlock
	"Remove oldObject as one of the receiver's elements.  If several of the
	elements are equal to oldObject, only one is removed. If no element is equal to
	oldObject, answer the result of evaluating anExceptionBlock.  Otherwise,
	answer the argument, oldObject.

	SequenceableCollections can not respond to this message."

	self subclassResponsibility!
removeAll: aCollection
	"Remove each element of aCollection from the receiver.  If successful for each,
	answer aCollection."

	aCollection do: [:each | self remove: each].
	^aCollection!
"-----------------------------------"!
!Collection methodsFor: 'testing'!
includes: anObject
	"Answer whether anObject is one of the receiver's elements."

	self do: [:each | anObject = each ifTrue: [^true]].
	^false!
isEmpty
	"Answer whether the receiver contains any elements."

	^self size = 0!
occurrencesOf: anObject
	"Answer how many of the receiver's elements are equal to anObject."

	| tally |
	tally _ 0.
	self do: [:each | anObject = each ifTrue: [tally _ tally + 1]].
	^tally!
